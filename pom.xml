<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<artifactId>spring-boot-mongodb-elasticsearch-kafka-example</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>${pom.groupId}:${pom.artifactId}</name>
	<description>ZenWave360 Example</description>

	<properties>
		<!--        <skipTests>true</skipTests>-->
		<java.version>17</java.version>
		<spring-boot.version>2.7.0</spring-boot.version>
		<archunit-junit5.version>1.0.1</archunit-junit5.version>
		<mapstruct.version>1.5.1.Final</mapstruct.version>
		<spring-cloud.version>2021.0.3</spring-cloud.version>
		<avro.version>1.11.1</avro.version>
		<testcontainers.version>1.17.2</testcontainers.version>
		<pact.version>4.2.14</pact.version>

		<zenwave.version>${project.version}</zenwave.version>

		<!-- Plugin versions -->
		<maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
		<maven-site-plugin.version>3.9.1</maven-site-plugin.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven-javadoc-plugin.version>3.3.1</maven-javadoc-plugin.version>
		<maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
		<maven-enforcer-plugin.version>3.0.0</maven-enforcer-plugin.version>
		<maven-failsafe-plugin.version>3.0.0-M5</maven-failsafe-plugin.version>
		<maven-idea-plugin.version>2.2.1</maven-idea-plugin.version>
		<maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
		<maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.3.2</maven-war-plugin.version>
		<maven-checkstyle-plugin.version>3.1.2</maven-checkstyle-plugin.version>
		<checkstyle.version>9.2</checkstyle.version>
		<nohttp-checkstyle.version>0.0.10</nohttp-checkstyle.version>
		<git-commit-id-plugin.version>5.0.0</git-commit-id-plugin.version>
		<modernizer-maven-plugin.version>2.3.0</modernizer-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
		<jib-maven-plugin.version>3.1.4</jib-maven-plugin.version>
		<jib-maven-plugin.image>eclipse-temurin:11-jre-focal</jib-maven-plugin.image>
		<jib-maven-plugin.architecture>amd64</jib-maven-plugin.architecture>
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
		<openapi-generator-maven-plugin.version>5.3.1</openapi-generator-maven-plugin.version>
		<properties-maven-plugin.version>1.0.0</properties-maven-plugin.version>
		<sonar-maven-plugin.version>3.9.1.2184</sonar-maven-plugin.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers-bom</artifactId>
				<version>${testcontainers.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.junit.platform</groupId>
				<artifactId>junit-platform-suite</artifactId>
				<version>1.9.0</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.tngtech.archunit</groupId>
				<artifactId>archunit-junit5-api</artifactId>
				<version>${archunit-junit5.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- Adding the engine dependency to the surefire-plugin unfortunately does not work in the current version. -->
			<!-- https://www.archunit.org/userguide/html/000_Index.html#_junit_5 -->
			<dependency>
				<groupId>com.tngtech.archunit</groupId>
				<artifactId>archunit-junit5-engine</artifactId>
				<version>${archunit-junit5.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<build>
		<defaultGoal>spring-boot:run</defaultGoal>
		<plugins>
			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.5.2</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>5.4.0</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/model/openapi.yml</inputSpec>
							<generatorName>spring</generatorName>
							<apiPackage>io.zenwave360.example.adapters.web</apiPackage>
							<modelPackage>io.zenwave360.example.adapters.web.model</modelPackage>
							<modelNameSuffix>DTO</modelNameSuffix>
							<addCompileSourceRoot>true</addCompileSourceRoot>
							<supportingFilesToGenerate>
								ApiUtil.java
							</supportingFilesToGenerate>
							<configOptions>
								<documentationProvider>none</documentationProvider>
								<openApiNullable>false</openApiNullable>
								<useOptional>true</useOptional>
								<useTags>true</useTags>
								<interfaceOnly>true</interfaceOnly>
								<delegatePattern>false</delegatePattern>
							</configOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.github.zenwave360.zenwave-sdk</groupId>
				<artifactId>zenwave-sdk-maven-plugin</artifactId>
				<version>${zenwave.version}</version>
				<configuration>
					<inputSpec>${pom.basedir}/src/main/resources/model/asyncapi.yml</inputSpec>
					<skip>false</skip>
					<addCompileSourceRoot>true</addCompileSourceRoot>
					<addTestCompileSourceRoot>true</addTestCompileSourceRoot>
				</configuration>
				<executions>
					<!-- DTOs -->
					<execution>
						<id>generate-asyncapi-dtos</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>jsonschema2pojo</generatorName>
							<configOptions>
								<modelPackage>io.zenwave360.example.core.domain.events</modelPackage>
								<!--								<jsonschema2pojo.includeTypeInfo>true</jsonschema2pojo.includeTypeInfo>-->
								<jsonschema2pojo.useLongIntegers>true</jsonschema2pojo.useLongIntegers>
							</configOptions>
						</configuration>
					</execution>
					<!-- Generate PROVIDER -->
					<execution>
						<id>generate-asyncapi</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring-cloud-streams3</generatorName>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
<!--								<transactionalOutbox>mongodb</transactionalOutbox>-->
								<modelPackage>io.zenwave360.example.core.domain.events</modelPackage>
								<producerApiPackage>io.zenwave360.example.core.outbound.events</producerApiPackage>
								<consumerApiPackage>io.zenwave360.example.adapters.commands</consumerApiPackage>
							</configOptions>
						</configuration>
					</execution>

					<!-- Tests for Inbound Commands -->
					<!-- mvn zenwave-sdk:generate@consumer-tests -->
					<execution>
						<id>consumer-tests</id>
						<configuration>
							<generatorName>spring-cloud-streams3-tests</generatorName>
							<configOptions>
								<role>provider</role>
								<style>imperative</style>
								<modelPackage>io.zenwave360.example.core.domain.events</modelPackage>
								<consumerApiPackage>io.zenwave360.example.adapters.commands</consumerApiPackage>
								<targetFolder>${pom.basedir}</targetFolder>
							</configOptions>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>io.github.zenwave360.zenwave-sdk.plugins</groupId>
						<artifactId>asyncapi-spring-cloud-streams3</artifactId>
						<version>${zenwave.version}</version>
					</dependency>
					<dependency>
						<groupId>io.github.zenwave360.zenwave-sdk.plugins</groupId>
						<artifactId>asyncapi-jsonschema2pojo</artifactId>
						<version>${zenwave.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<annotationProcessorPaths>
							<path>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-configuration-processor</artifactId>
								<version>${spring-boot.version}</version>
							</path>
							<path>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${mapstruct.version}</version>
							</path>
						</annotationProcessorPaths>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<source>${maven.compiler.source}</source>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>pre-unit-tests</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
						<execution>
							<id>post-unit-test</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>pre-integration-tests</id>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
						</execution>
						<!-- Ensures that the code coverage report for integration tests is created after integration tests have been run -->
						<execution>
							<id>post-integration-tests</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
				</plugin>
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven-site-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<excludes>
							<exclude>**/*IT*</exclude>
							<exclude>**/*IntTest*</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<configuration>
						<!-- Due to spring-boot repackage, without adding this property test classes are not found
                             See https://github.com/spring-projects/spring-boot/issues/6254 -->
						<classesDirectory>${project.build.outputDirectory}</classesDirectory>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<includes>
							<include>**/*IT*</include>
							<include>**/*IntTest*</include>
						</includes>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-stream-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-schema</artifactId>
			<version>2.2.1.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite</artifactId>
		</dependency>
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-api</artifactId>
		</dependency>
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-engine</artifactId>
		</dependency>

		<dependency>
			<groupId>io.github.zenwave360.zenwave-sdk.plugins</groupId>
			<artifactId>java-to-jdl</artifactId>
			<version>${zenwave.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>
